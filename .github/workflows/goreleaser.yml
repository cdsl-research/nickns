name: Go Release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  common:
    runs-on: ubuntu-20.04
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Store variable to file
        env:
          url: ${{ steps.create_release.outputs.upload_url }}
        run: |
          mkdir artifact
          echo $url > artifact/vars.txt

      - name: Store Variable via file
        uses: actions/upload-artifact@v1
        with:
          name: artifact
          path: artifact/vars.txt

  specific:
    env:
      GOPATH: ${{ github.workspace }}/go
      GO111MODULE: on
    needs: common
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        os: [mac64, lin64, win64]
        include:
        - os: mac64
          goos: darwin
          arch: amd64
        - os: lin64
          goos: linux
          arch: amd64
        - os: win64
          goos: windows
          arch: amd64
    steps:
      - name: Get Stored Variable via file
        uses: actions/download-artifact@v1
        with:
          name: artifact

      - name: Set Variable from artifact
        id: get_vars
        run: |
          url=$(cat artifact/vars.txt)
          echo "::set-output name=upload_url::$url"

      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Go
        uses: actions/setup-go@v1
        with:
          go-version: '1.17'

      - name: Install modules
        run: go mod vendor

      - name: Build
        env:
          goos: ${{ matrix.goos }}
          goarch: ${{ matrix.arch }}
        run: |
          mkdir dist
          GOOS=$goos GOARCH=$goarch go build -v -o dist/app .
          zip -j -r ${{ github.workspace }}/release dist

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_vars.outputs.upload_url }}
          asset_path: release.zip
          asset_name: release-${{ matrix.os }}.zip
          asset_content_type: application/zip
